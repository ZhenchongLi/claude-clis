[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "claude-clis"
version = "0.1.0"
description = "A modern collection of AI-powered CLI tools for document processing, content generation, and more"
readme = "README.md"
license = "MIT"
requires-python = ">=3.11"
authors = [
    {name = "Claude CLI Tools", email = "noreply@example.com"}
]
keywords = ["cli", "ai", "tools", "document-processing", "markdown", "pdf", "docx", "pipx", "claude"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Markup :: Markdown",
    "Topic :: Office/Business :: Office Suites",
    "Topic :: Utilities",
    "Typing :: Typed",
]

dependencies = [
    "click>=8.1.0",
    "rich>=13.8.0",
    "python-docx>=1.2.0",
    "pymupdf>=1.26.3",
    "pydantic-ai>=0.0.14",
    "pydantic>=2.11.0",
    "pyyaml>=6.0.2",
    "httpx>=0.27.0",
    "google-generativeai>=0.8.0",
    "anthropic>=0.34.0",
    "pymupdf4llm",
    "rich-click>=1.8.0",
    "socksio>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0",
    "mypy>=1.11",
    "black>=24.0",
    "ruff>=0.6.0",
    "pytest-cov>=5.0",
]
doc2md = [
    "python-docx>=1.2.0",
    "pymupdf>=1.26.3",
    "pymupdf4llm",
]

[project.scripts]
claude-clis = "claude_clis.main:main"

[project.urls]
Homepage = "https://github.com/your-username/claude-clis"
Documentation = "https://github.com/your-username/claude-clis#readme"
Repository = "https://github.com/your-username/claude-clis"
Issues = "https://github.com/your-username/claude-clis/issues"

[tool.hatch.build.targets.wheel]
packages = ["src/claude_clis"]

[tool.hatch.envs.default]
dependencies = [
    "coverage[toml]",
    "pytest",
    "pytest-cov",
]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B018", "S101", "ARG", "FBT"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true
show_column_numbers = true
show_error_codes = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "pymupdf",
    "pymupdf4llm",
    "fitz",
    "docx",
    "google.generativeai",
    "anthropic",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=claude_clis",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=80",
]

[tool.coverage.run]
source = ["claude_clis"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
